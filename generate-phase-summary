#!/usr/bin/env perl

use 5.024;

# Append "." to include path
BEGIN {push @INC, '.'}

use Time::HiRes qw(gettimeofday);
use Report::Generator;
use Report::Rs;
use Report::SNPQCI;
use Report::SampleQC;

use strict;
use warnings;

my %processors = (
    'Rs' => {
        'plink_flip' => \&Report::Rs::plink_flip,
        'plink_exclude' => \&Report::Rs::plink_exclude
    },
    'SNPQCI' => {
        'merge_batches' => \&Report::SNPQCI::merge_batches,
        'generate_hwe_diagrams' => \&Report::SNPQCI::generate_hwe_diagrams,
        'exclude_lists_for_failed_hwe' => \&Report::SNPQCI::exclude_lists_for_failed_hwe,
        'exclude_bad_variants' => \&Report::SNPQCI::exclude_bad_variants,
        'draw_definetti_after_QCI' => \&Report::SNPQCI::draw_definetti_after_QCI
    }
    ,
    'SampleQC' => {
        'apply_precalc_remove_list' => \&Report::SampleQC::apply_precalc_remove_list,
        'determine_miss_het' => \&Report::SampleQC::determine_miss_het,
            'prune' => \&Report::SampleQC::prune,
            'pca_run' => \&Report::SampleQC::hapmap_eigenstrat,
            'flashpca2_pruned_1kG' => \&Report::SampleQC::onekg_flashpca,
            'remove_bad_samples' => \&Report::SampleQC::remove_bad_samples
    }
);

sub expand_path {
    my $base = shift;
    my $hash = shift;

    if ($hash =~ m|(..)/(.*)|) {
        my $hash_base = $1;
        my $hash_remainder = $2;
        opendir(my $dh, "$base/$hash_base/") or die($!);
        my @results = grep { /^$hash_remainder.*/ } readdir($dh);
        closedir $dh;

        if (@results > 0) {
            return $base . "/" . $hash_base . "/" . $results[0];
        } else {
            return "/dev/null";
        }
    }
}

if (@ARGV != 4) {
    print STDERR "Syntax: $0 <pipeline> <tag> <workdir> <target>\n";
    exit 1;
}

my $arg_pipeline = shift @ARGV;
my $arg_tag = shift @ARGV;
my $arg_workdir = shift @ARGV;
my $arg_target = shift @ARGV;

# Parse trace
open (my $trace, '<', 'trace.txt') or die($!);
open (my $tex, '>', $arg_target) or die($!);

<$trace>;
while(<$trace>) {
    chomp;
    my ($process, $procname, $tag, $workdir) = split /;/;
    if (exists $processors{$arg_pipeline}{$process}) {
        my $expanded = expand_path($arg_workdir, $workdir);

        print 'Processing ' . $arg_pipeline . '::' . $process . "...\n";

        print $tex $processors{$arg_pipeline}{$process}->($expanded, $tag);
    }
}
close $trace;
close $tex;


