#+AUTHOR: Jan Christian Kaessens <j.kaessens@ikmb.uni-kiel.de>
#+TITLE: GWAS QC Pipeline
#+STARTUP: showall

/Note: This is currently under heavy development. Is likely that this documentation does not match the actual source code. It will soon, though./

This pipeline is divided into several sub-pipelines that do quality control on GWAS data sets

* Running
   You will need the =IKMB= module environment, with =Nextflow= and =Java= loaded.
   This pipeline makes use of the module environment itself so you won't have to
   choose or define specific tool versions (i.e. Plink/1.02).

#+BEGIN_QUOTE
~nextflow -c dataset.config [ -c more.config [ -c andevenmore.config ]] run <script.nf> --input=<basename> [<other options>]~
#+END_QUOTE

*Example:*

#+BEGIN_QUOTE
~nextflow -c set_cvid2.config -c rs.config run SNPQC-Rs.nf --input=../CVID2 --output=./out --output-basename=after-Rs~

This will load paramters from =set_cvid2.config= and =rs.config= (in that order, silently overwriting
previously defined options), run the pipeline script at =SNPQC-Rs.nf= with the input 
files =../CVID2.{bim,bed,fam}=, writes the results into the =./out= directory and sets the result basename to =after-Rs=.
#+END_QUOTE

* Configuration
  Each data set comes with a set of configuration items that need to be provided in the =params= namespace:

  | Key                      | Example value                                 | Description |
  |--------------------------+-----------------------------------------------+-------------|
  | =chip_version=           | =Immunochip=                                  |             |
  | =chip_producer=          | =Illumina=                                    |             |
  | =chip_build=             | =hg19=                                        |             |
  | =chip_strand_info=       | =Immunochip_orig_annotation=                  |             |
  | =switch_to_chip_build=   | =hg19=                                        |             |
  | =individuals_annotation= | =CVID-HC_individuals_Ichip_annotation_v2.txt= |             |
  
  You can find examples in the =config/= directory.

* Pipelines
** Name Cleansing
  Pipeline script: =SNPQC-Rs.nf=
    
  Performs the following steps:
  1. translate Immunochip (or other chip-specific SNP names for that matter) to 'Rs'-type SNP names
  2. flips alleles based on data set-specific flip files
  3. removes duplicates, NN-type SNPs and those specified in a chip-specific exclude lists from the data set

  *Parameters*:
  + ~--input=basename~ :: /mandatory/ define the input data set. Should point to
       your Plink data set's base name, i.e. the given example will use the
       files =basename.bim=, =basename.bed= and =basename.fam= as input data.
  + ~--output[=.]~ :: /optional/ define output directory. It's /optional/ but will litter your current working directory if not specified.
  + ~--output-basename[=result]~ :: /optional/ output basename. Defaults to =result.{bim,bed,fam,...}= as result names

** SNP QC Phase I
  Pipeline script: =SNPQCI.nf=

  Performs the following steps:
  1. calculate HWE values for whole collection
  2. draw DeFinetti plots of cases, controls and cases+controls
  3. split the data set into 1000-SNP chunks, and calculate HWE on each chunk
  4. merge all chunks back into a single HWE table
  5. determine variants that should be excluded:
     - based on sample annotation list (?)
     - based on whole-collection missingness
     - based on per-batch missingness
  6. apply exclusion lists
  7. plot DeFinetti diagrams for merged batch
  8. plot DeFinetti diagrams per batch before and after SNPQCI

