digraph {
  # set to DIN A4 aspect ratio
  ratio="full";
  size="8.3,11.7!";
  margin=0;
  graph [ fontsize=12, fontname=Roboto ]
  node [ fontsize=12, fontname=Roboto ]
  edge [ fontsize=11, fontname=Roboto ]
  {
    # dataset names
    node [shape=note]
    batch1 [label="batch 1"]
    batch2 [label="batch 2"]
    batchn [label="batch n"]

    after_QCI_merge [label="collection_Rs"];
    after_QCI [label="collection_QCI"];

    SampleQC_final [label="collection_SampleQCI_final"];
    SampleQC_final_wr [label="collection_SampleQCI_final_withoutRelated"];

    final [label="collection_QCed_final"];
    
  }

  {
    # process names
    rs_cda [label="Chip detect"]
    rs_clean_namesa [label="Lift genome build"]
    rs_norm_variantsa [label="Normalize variant names"]
    rs_flipa [label="Flip variants"]
    rs_duplicatesa [label="Remove duplicates"]
    
    rs_clean_namesb [label="Lift genome build"]
    rs_cdb [label="Chip detect"]
    rs_norm_variantsb [label="Normalize variant names"]
    rs_flipb [label="Flip variants"]
    rs_duplicatesb [label="Remove duplicates"]
    
    rs_clean_namesc [label="Lift genome build"]
    rs_cdc [label="Chip detect"]
    rs_norm_variantsc [label="Normalize variant names"]
    rs_flipc [label="Flip variants"]
    rs_duplicatesc [label="Remove duplicates"]
  }


  subgraph cluster_1 {
    rs_cda;
    rs_clean_namesa -> rs_norm_variantsa -> rs_flipa -> rs_duplicatesa;
    label="Rs Phase";
  }

  subgraph cluster_2 {
    rs_cdb;
    rs_clean_namesb -> rs_norm_variantsb -> rs_flipb -> rs_duplicatesb;
    label="Rs Phase";
  }

  subgraph cluster_3 {
    rs_cdc;
    rs_clean_namesc -> rs_norm_variantsc -> rs_flipc -> rs_duplicatesc;
    label="Rs Phase";
  }

  batch1 -> rs_clean_namesa;
  batch1 -> rs_cda;
  rs_duplicatesa -> "Merge batches";

  batch2 -> rs_clean_namesb;
  batch2 -> rs_cdb;
  rs_duplicatesb  -> "Merge batches";

  batchn -> rs_clean_namesc;
  batchn -> rs_cdc;
  rs_duplicatesc  -> "Merge batches";


  subgraph cluster_snpqci {
    color=black;
    node [style=filled,color=white];
    label="SNP QC I Phase";

    node [style=ellipse,color=black];

    snpqci_remove[label="Remove bad SNPs"];

    "Merge batches" -> after_QCI_merge;
    after_QCI_merge -> {"Filter HWE" "Filter Missingness" "Filter Missingness batch-wise" "Draw DeFinetti Diagrams"};

    "Filter HWE" -> snpqci_remove [label="Outliers"];
    "Filter Missingness" -> snpqci_remove [label="Outliers"];
    "Filter Missingness batch-wise" -> snpqci_remove [label="Outliers"];
    after_QCI_merge -> snpqci_remove [color=blue,label="Dataset"];

  }

  subgraph cluster_sampleqci {
    label="Sample QC Phase";

    sampleqci_miss_het [label="Determine individual missingness/heterozygosity outliers"];

    sampleqci_miss_het -> prune;

    prune [label="Prune individuals by LD, Missingness and regions"];
    pca_eigen1 [label="PCA/Eigenstrat (images)"];
    pca_eigen2 [label="PCA/Eigenstrat"];
    sampleqc_remove_bad [label="Remove bad samples"];
    pca_flash1 [label="FlashPCA"];

    prune -> "Detect (related) duplicates through IBD/IBS";
    "Detect (related) duplicates through IBD/IBS" -> sampleqc_remove_bad [label="Duplicates"];

    prune -> "Merge with HapMap" -> pca_eigen1;
    prune -> "Merge with 1kG" -> pca_flash1;
    pca_flash1 -> sampleqc_remove_bad [label="Outliers"];

    prune -> pca_eigen2;
    pca_eigen2 -> sampleqc_remove_bad [label="Outliers"];
    prune -> FlashPCA;
    FlashPCA -> sampleqc_remove_bad [label="Outliers"];
    sampleqci_miss_het -> sampleqc_remove_bad [label="Outliers"];

    sampleqc_remove_bad -> "Update annotations" -> "Draw Histograms";

    "Merge with 1kG" -> "FlashPCA w/o projection";

    sampleqc_remove_bad -> "Remove related";
    
    "Detect (related) duplicates through IBD/IBS" -> "Remove related" [label="Related samples"];
    
  }

  snpqci_remove -> after_QCI;
  after_QCI-> sampleqci_miss_het;
  after_QCI -> sampleqc_remove_bad [color=blue, label="Dataset"];

  "Update annotations" -> SampleQC_final;
  
  "Remove related" -> SampleQC_final_wr;
  SampleQC_final_wr -> "HF test";
  
  sampleqc_remove_bad -> SampleQC_final [color=blue];


  subgraph cluster_snpqcii {
    label="SNP QC II";
    "HF test";
    qc2_prune [label="Prune individuals by LD, Missingness and regions"];
    qc2_prune_atcg [label="Prune individuals, keep AT/CG"];
    qc2_merge_1kg [label="Merge with 1kG"];
    qc2_merge_1kg_atcg [label="Merge with 1kG (with AT/CG)"];
    qc2_1kg_flashpca [label="FlashPCA"];
    qc2_1kg_flashpca_atcg [label="FlashPCA (with AT/CG)"];

    # SampleQC_final -> qc2_prune;
    "HF test" -> "Remove HF test outliers";
    #-> qc2_prune [label="Outliers"];
    qc2_prune -> qc2_merge_1kg -> qc2_1kg_flashpca;
    qc2_prune_atcg -> qc2_merge_1kg_atcg -> qc2_1kg_flashpca_atcg;
    qc2_1kg_flashpca -> "Final Sample cleaning" [label="Outliers"];
    

    "Remove HF test outliers" -> "Determine monomorphics" -> "Final SNP cleaning";
    "Remove HF test outliers" -> "Determine differential missingness" -> "Final SNP cleaning";
    "Remove HF test outliers" -> "Find unknown diagnoses" -> "Final SNP cleaning";

    "Remove HF test outliers" -> "Final SNP cleaning" [color="blue", label="Dataset_SNPQCII"];
    "Final SNP cleaning" -> qc2_prune;
    "Final SNP cleaning" -> qc2_prune_atcg;
    "Final SNP cleaning" -> "Final Sample cleaning" [color="blue", label="Dataset_QCed"];

    qc2_final_flashpca [label="Prune & FlashPCA with CON projection"];
    qc2_final_tw [label="Tracy Widom stats"];
    qc2_final_histos [label="Draw histograms"];
    
    "Final Sample cleaning" -> "Plot MAF";
    "Final Sample cleaning" -> qc2_final_flashpca;
    qc2_final_flashpca -> qc2_final_tw;
    qc2_final_flashpca -> qc2_final_histos;
    
  }

  #SampleQC_final -> "Remove HF test outliers" [color=blue];
  SampleQC_final_wr -> "Remove HF test outliers" [color=blue];
  "Final Sample cleaning" -> final [color="blue"];
  
  
}

