BootStrap: library
From: ubuntu:16.04

%post

# Uni Muenster is faster but not as stable as the GWDG one
export CRAN_MIRROR="https://ftp.gwdg.de/pub/misc/cran/"

echo "Installing basic build system"
#sed -i 's/$/ universe/' /etc/apt/sources.list
echo 'deb http://cloud.r-project.org/bin/linux/ubuntu xenial-cran35/' >>/etc/apt/sources.list
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
 
apt -y update
apt -y dist-upgrade
apt -y install build-essential locales wget unzip git tclsh bash psmisc curl gnuplot ghostscript tabix moreutils libswitch-perl moreutils gawk libgfortran3 sqlite3 libdbd-sqlite3-perl python3-scipy python-scipy vcftools
apt -y install r-base r-base-dev libssl-dev libgit2-dev libxml2-dev python-pip python3-pip
apt -y install texlive-latex-recommended texlive-luatex texlive-science texlive-latex-extra texlive-xetex

echo "Setting bash as default shell (instead of dash, thanks Canonical Inc)"
rm /bin/sh
ln -s /bin/bash /bin/sh

locale-gen en_US en_US.UTF-8 de_DE.UTF-8 de_DE

echo "Installiung Plink 2"
   cd /opt
   wget -nc http://s3.amazonaws.com/plink2-assets/alpha2/plink2_linux_x86_64.zip
   unzip -o plink2_linux_x86_64.zip
   rm -f plink2_linux_x86_64.zip
               
               

echo "Installing Plink 1.9"
   cd /opt
   mkdir -p plink-1.9
   cd plink-1.9
   wget -nc $(curl -s https://www.cog-genomics.org/plink/1.9/ | grep -oE 'http://s3.amazonaws.com/plink1-assets/plink_linux_x86_64_[0-9]+.zip') -O plink_linux_x86_64.zip
   unzip -o plink_linux_x86_64.zip
   rm -f plink_linux_x86_64.zip

echo "Installing EIGENSTRAT 6.1.4"
   cd /opt
   wget -nc https://data.broadinstitute.org/alkesgroup/EIGENSOFT/EIG-6.1.4.tar.gz
   tar xaf EIG-6.1.4.tar.gz
   mv EIG-6.1.4 eigensoft-6.1.4

echo "Installing BCFtools 1.3"
   cd /opt
   wget -nc https://github.com/samtools/bcftools/releases/download/1.3/bcftools-1.3.tar.bz2
   tar xaf bcftools-1.3.tar.bz2
   cd bcftools-1.3
   make
   make install
   make clean
   rm -rf bcftools-1.3

echo "Installing FlashPCA2"
  cd /opt
  mkdir -p flashpca2
  cd flashpca2
  wget -nc https://github.com/gabraham/flashpca/releases/download/v2.0/flashpca_x86-64.gz
  gunzip flashpca_x86-64.gz
  chmod a+x flashpca_x86-64 
  ln -s flashpca_x86-64 flashpca2
  rm -f flashpca_x86-64.gz

# Make bind mount points
mkdir -p /scratch
chmod 777 /scratch


echo "Installing R packages"
   echo "if('Rserve' %in% rownames(installed.packages()) == FALSE) {install.packages('Rserve', repo='$CRAN_MIRROR')}" >/tmp/packages.r
   echo "if('hwde' %in% rownames(installed.packages()) == FALSE) {install.packages('hwde', repo='$CRAN_MIRROR')}" >>/tmp/packages.r
   echo "if('sm' %in% rownames(installed.packages()) == FALSE) {install.packages('sm', repo='$CRAN_MIRROR')}" >>/tmp/packages.r
   echo "if('plotrix' %in% rownames(installed.packages()) == FALSE) {install.packages('plotrix', repo='$CRAN_MIRROR')}" >>/tmp/packages.r
   echo "if('gridExtra' %in% rownames(installed.packages()) == FALSE) {install.packages('gridExtra', repo='$CRAN_MIRROR')}" >>/tmp/packages.r
   echo "if('R.utils' %in% rownames(installed.packages()) == FALSE) {install.packages('R.utils', repo='$CRAN_MIRROR')}" >>/tmp/packages.r
   echo "install.packages(c('BiocManager'))" >>/tmp/packages.r
   echo "BiocManager::install()"
   echo 'BiocManager::install(c("SNPRelate","snpStats"))' >>/tmp/packages.r
#    echo 'biocLite("snpStats")' >>/tmp/packages.r
   Rscript /tmp/packages.r

cd /opt
git clone --depth 1 -b master https://github.com/weizhouUMICH/SAIGE
pip install cget
Rscript SAIGE/extdata/install_packages.R
#wget https://github.com/weizhouUMICH/SAIGE/releases/download/0.36.2/SAIGE_0.36.2_R_x86_64-pc-linux-gnu.tar.gz
#R CMD INSTALL SAIGE_0.36.2_R_x86_64-pc-linux-gnu.tar.gz
echo 'devtools::install_github("weizhouUMICH/SAIGE")' >>/tmp/packages2.r
Rscript /tmp/packages2.r

echo "Installing modules"

   cd /opt
   git clone --branch v1.832 --depth 1 https://git.code.sf.net/p/modules/modules-tcl modules-modules-tcl || true
   cd modules-modules-tcl
   echo "#!/bin/bash" >/tmp/modules-setup.bash
   echo "./configure && make -j && make install" >>/tmp/modules-setup.bash
   chmod a+x /tmp/modules-setup.bash
   /tmp/modules-setup.bash

   cd /opt
   git clone --depth 1 http://git.ikmb.uni-kiel.de/j.kaessens/singularity-modules.git modules || true
   echo "module use --append /opt/modules" >>/usr/local/modules-tcl/init/modulerc

echo "Cleanup..."
   apt-get -y --purge autoremove
   apt-get -y remove tex*-doc
   apt-get -y clean

%environment
export MODULEPATH=/opt/modules
source /usr/local/modules-tcl/init/bash

