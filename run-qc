#!/usr/bin/env perl
# -*- mode:perl -*-

# QC Pipeline launch script
#
# 2018, Jan KÃ¤ssens <j.kaessens@ikmb.uni-kiel.de>


#use constant OUT_RS => './out-Rs';
#use constant OUT_SNPQCI => './out-SNPQCI';
#use constant OUT_SAMPLEQC => './out-SampleQC';
#use constant OUT_SNPQCII => './out-SNPQCII';

# TODO Check if nextflow is installed and accessible
use constant NXF_BIN => 'nextflow'; # expect it to be in $PATH

# bare minimum of packages, RZ cluster is not exactly flexible
use 5.22.0;
use Getopt::Long;
use Pod::Usage;
use File::Temp qw/ tempdir /;
use File::Basename;
use File::Copy;
use Cwd;

use strict;
use warnings;

use autodie qw(:all); # no stable signal or error handling, yet

# Trim leading and trailing whitespace from argument
sub trim {
    my $s = shift;
    $s =~ s/^\s+|\s+$//g;
    return $s;
}

# Strip leading and trailing double quotes from argument
sub strip_quotes {
    my $s = shift;
    $s =~ s/^"|"$//g;
    return $s;
}

# Returns a hash table that is parsed from the given config file name
# Expects config file path as argument
sub parse_config {
    my %c;
    my $f = shift; # file
    open my $conf, "<", $f or die("Failed to open $f: $!");
    while(<$conf>) {
        if (/^(.+)=(.+)$/) {
            my $key = trim($1);
            my $val = strip_quotes(trim($2));
            $c{$key} = $val;
        }
    }
    return %c;
}

# updates the relevant ENV paths via restricted variable substitution
# Expects config hash reference as argument
sub update_env_paths {
    my $c = shift;

    $c->{'BATCH_DIR'} =~ s/\$\{env.BIND_DIR\}/$c->{BIND_DIR}/;
}

# Wait for the user to 
sub pause {
    my $line = "";
    do {
        say "\nType NEXT (in upper-case letters) and press Enter to continue...";
        $line = <STDIN>;    
    } while($line ne "NEXT\n");
}

# Call the Nextflow executable. Currently only used for output filtering.
# Expects list of command slices (as is used in execv or system) as argument
sub call_nextflow {
    my @args = @_;
    my $cmdline = "@args | grep -v 'WARN: The config file defines settings for an unknown process'";
    system($cmdline);
}

# Parse command-line arguments
my $opt_pause = 0;
my $opt_output = "./";
my $opt_help = 0;
my $opt_verbose = 0;

GetOptions("pause" => \$opt_pause,
           "help|?" => \$opt_help,
           "verbose|v" => \$opt_verbose,
           "output=s" => \$opt_output);
pod2usage(1) if $opt_help;
pod2usage(1) if @ARGV == 0;

$opt_output =~ s!/*$!/!; # Add trailing slash to output path, if not already done

# Do some rudimentary parsing of the Nextflow config and variable substitution

my %config = parse_config($ARGV[0]);
update_env_paths(\%config);

# Prepare temporary directory for storing the report auxiliaries
(undef, my $confdir, undef) = fileparse($ARGV[0]);
print "Config directory: $confdir\n" if $opt_verbose;
# my $tempdir = tempdir('nxf-qc-' . $config{'collection_name'} . '_XXXX', CLEANUP => 1);
my $tempdir = tempdir('nxf-qc-' . $config{'collection_name'} . '_XXXX', CLEANUP => 0, TMPDIR => 1) or die($!);

$tempdir .= "/";

print "Temp directory for reports: $tempdir\n" if $opt_verbose;

my @trace_targets = ();

# Feeds all single-batch datasets from the config file into the
# Rs stage, one after another.
sub run_rs {
    say "--------------------------------------------";
    say "Launching stage 1 'Rs': SNP Name Translation";
    say "--------------------------------------------";

    # Collect batches from configuration and launch Rs.nf for each batch
    my @batches = split (/,/, $config{"disease_names"});
    for (@batches) {
        my $batch = $_;
        my %batchconf = parse_config($confdir . "/$_.config");
        my @cmd = ("nextflow");
        push @cmd, '-c';
        push @cmd, $confdir . "QC.config";
        push @cmd, '-c';
        push @cmd, $confdir . "$batch.config";
        push @cmd, 'run';
        push @cmd, 'Rs.nf';
        push @cmd, '-resume';
        push @cmd, '-with-report';
        push @cmd, $config{"rs_dir"} . "/Rs-$batch.exec-report.html";
        push @cmd, '--trace_target';
        my $target = $tempdir . "Rs-$batch.report.tex";
        push @cmd, $target;
        push @trace_targets, $target;

        say "Processing batch $batch...";
        say "Calling @cmd";
        call_nextflow(@cmd);
    }

    say "Stage 1 completed. Output files have been copied to " . $config{"rs_dir"} ;
}

sub run_snpqci {
    say "---------------------------------------------------------------------";
    say "Launching stage 2 'SNPQCI': Batch merge, HWE and missingness analyses";
    say "---------------------------------------------------------------------";

    # Collect batches from configuration and launch Rs.nf for each batch

    my @cmd = ("nextflow");
    push @cmd, '-c';
    push @cmd, $confdir . "QC.config";
    push @cmd, '-c';
    push @cmd, $confdir . "$config{collection_name}.config";

    push @cmd, 'run';
    push @cmd, 'SNPQCI.nf';
    push @cmd, '-resume';
    push @cmd, '-with-report';
    push @cmd, $config{"snpqci_dir"} . '/SNPQCI-report.html';
    push @cmd, '--trace_target';
    my $target = $tempdir . "SNPQCI-$config{collection_name}.report.tex";
    push @cmd, $target;
    push @trace_targets, $target;

    say "Calling @cmd";
    call_nextflow(@cmd);

    say "Stage 2 completed. Output files have been copied to " . $config{"snpqci_dir"};
}

sub run_sampleqc {
    say "-----------------------------------------------------------------------";
    say "Launching stage 3 'SampleQC': Pruning, HapMap/1kG merging, PCA analyses";
    say "-----------------------------------------------------------------------";

    # Collect batches from configuration and launch Rs.nf for each batch


    my @cmd = ("nextflow");
    push @cmd, '-c';
    push @cmd, $confdir . "QC.config";
    push @cmd, '-c';
    push @cmd, $confdir . "$config{collection_name}.config";

    push @cmd, 'run';
    push @cmd, 'SampleQCI.nf';
    # push @cmd, '--input';
    # push @cmd, $opt_output . OUT_SNPQCI . "/$config{collection_name}_QCI";
    # push @cmd, '--output';
    # push @cmd, $opt_output . OUT_SAMPLEQC;
    push @cmd, '-resume';
    push @cmd, '-with-report';
    push @cmd, $config{"sampleqc_dir"} . '/SampleQC-report.html';
    push @cmd, '--trace_target';
    my $target = $tempdir . "SNPQCI-$config{collection_name}.report.tex";
    push @cmd, $target;
    push @trace_targets, $target;

    say "Calling @cmd";
    call_nextflow(@cmd);

    say "Stage 3 completed. Output files have been copied to " . $config{"sampleqci_dir"};
}

# sub run_snpqcii {
#     say "--------------------------------------------------------";
#     say "Launching stage 4 'SNPQCII': HF-Test, Monomorphics check";
#     say "--------------------------------------------------------";

#     # Collect batches from configuration and launch Rs.nf for each batch


#     my @cmd = ("nextflow");
#     for my $c (@ARGV) {
#         push @cmd, '-c';
#         push @cmd, $c;
#     }

#     push @cmd, 'run';
#     push @cmd, 'SNPQCII.nf';
#     push @cmd, '--input';
#     push @cmd, $opt_output . OUT_SAMPLEQC . "/$config{collection_name}_SampleQCI_final";
#     push @cmd, '--input_wr';
#     push @cmd, $opt_output . OUT_SAMPLEQC . "/$config{collection_name}_SampleQCI_final_withoutRelatives";

#     push @cmd, '--output';
#     push @cmd, $opt_output . OUT_SNPQCII;
#     push @cmd, '-resume';
#     push @cmd, '-with-report';
#     push @cmd, $opt_output . OUT_SNPQCII . '/SNPQCII-report.html';

#     say "Calling @cmd";
#     call_nextflow(@cmd);

#     say "Stage 4 completed. Output files have been copied to " . $opt_output . OUT_SNPQCII;
#     say "The final QC'ed dataset can now be found in " . $opt_output . OUT_SNPQCII . "/$config{disease_data_set_prefix_release}.{bed.bim,fam,log,...}";
# }

# TODO Should do some error handling here, i.e. catch IPC exceptions. Needs IPC::System::Simple support, though

run_rs;
pause if $opt_pause;
run_snpqci;
pause if $opt_pause;
run_sampleqc;
#pause if $opt_pause;
#run_snpqcii;

my $title = $config{'collection_name'};
$title =~ s/_/\\_/g;

print "*** Translated $config{'collection_name'} to $title ***\n";

system("./finalize-qc-summary \"$title\" " . $tempdir . $config{collection_name} . ".tex @trace_targets");
my $last_wd = getcwd;
chdir $tempdir;
system("pdflatex " . $config{"collection_name"} . ".tex");
copy($config{"collection_name"} . ".pdf", "$last_wd/" . $config{"collection_name"} . ".pdf");
chdir $last_wd;

# Documentation starts here
__END__

=head1 NAME

run-qc - Launch the GWAS QC Pipeline

=head1 SYNOPSIS

run-qc [options] <config1> [<config2> [<confign>]]

 Options:
   --pause          stop after each pipeline stage and wait for the user to
                    press <ENTER>
   --help|-?        show his help message
   --output=<dir>   put generated files into the specified dir instead of the
                    current working directory
   --verbose|-v     be chatty

 Arguments:
   The only non-option arguments run-qc accepts are configuration file names.
   These files will be passed to Nextflow in this order, using the '-c'
   option. If the parameters defined within the config files clash, the
   first parameter definition takes precedence.
 
 Notes:
   This script expects the nextflow executable to be within the $PATH.
   
